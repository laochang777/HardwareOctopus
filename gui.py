# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'WinControl.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import ctypes
import re
import datetime, time

from win32api import GetMonitorInfo, MonitorFromPoint

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QFont, QIcon, QPixmap, QTextCursor, QPalette
from PyQt5.QtWidgets import QLabel, QAction, QHeaderView, \
    QTableWidgetItem, QMessageBox, QToolBar, QTextEdit, QPushButton, QLCDNumber, QAbstractItemView

from global_fun import print_log
from gui_serial import write_list_data
ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID("myappid")

import global_list
import gui_serial
from gui_serial import gui_serial_class


def creat_edit(self,name,lable,box,form):
    self.edit = QtWidgets.QLineEdit(box)
    # self.edit.setEnabled(False)
    self.edit.setObjectName(name)
    form.setWidget(lable, QtWidgets.QFormLayout.FieldRole, self.edit)
    return self.edit

def creat_lable(self,name,lable,box,form):
    self.lable = QtWidgets.QLabel(box)
    self.lable.setObjectName(name)
    form.setWidget(lable, QtWidgets.QFormLayout.LabelRole, self.lable)

    return self.lable



def serial_send(data):
    check_hex_array = [0] * 512
    out_serial = ""
    if global_list.GLOBAL_SERIAL_serial_handle:
        a_bytes = bytes.fromhex(data)
        aa = a_bytes.hex()
        print("send:" + aa + "\n")
        hex_len = int((len(aa) + 1) / 2)
        check = 0

        for i in range(0, hex_len):
            check_hex_array[i] = int(aa[i * 2:i * 2 + 2], 16)
            if i >= 2:
                check = check + check_hex_array[i]
        check = (0x100 - check) & 0xff
        str1 = '{:02x}'.format(check)

        for i in range(0, hex_len):
            out_serial = out_serial + aa[i * 2:i * 2 + 2] + ' '

        print_log("serial send " + str(hex_len).zfill(2) + " -> " + out_serial + str1 + "\n")
        result = global_list.GLOBAL_SERIAL_serial_handle.write(a_bytes + bytes.fromhex(str1))
        print("serial write return = " + str(result) + "\n")

    else:
        QMessageBox.warning(None, ' ', '请先打开串口')
        pass


class executeBtn_click():
    def __init__(self, num, cmd):
        self.num = num
        self.cmd = cmd

    def execute(self):
        print("executeBtn" + str(self.num) + "\n")
        global_list.GLOBAL_start_test = False
        serial_send(self.cmd)


class Ui_WinControl(object):

    def __init__(self):
        super().__init__()


    def setupUi(self, WinControl):
        gui_serial.read_serial_data(self)
        # 获取屏幕分辨率
        user32 = ctypes.windll.user32
        screensizex = user32.GetSystemMetrics(0)
        screensizey = user32.GetSystemMetrics(1)

        monitor_info = GetMonitorInfo(MonitorFromPoint((0, 0)))
        work_area = monitor_info.get("Work")

        # 计算实际窗口分辨率
        self.widget_height = work_area[3] - work_area[3] / 10
        self.widget_width = work_area[2] - work_area[2] / 10
        print(self.widget_height, self.widget_width)

        # 设置窗口尺寸和标题
        # 隐藏标题栏，重写标题栏
        WinControl.resize(self.widget_width, self.widget_height)
        WinControl.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowMinimizeButtonHint)
        icon = QIcon()
        icon.addPixmap(QPixmap("res/0key1.png"), QIcon.Normal, QIcon.Off)
        WinControl.setWindowIcon(icon)

        lblfill = QLabel(WinControl)
        lblfill.setAlignment(QtCore.Qt.AlignCenter)
        lblfill.setGeometry(0,0,self.widget_width,self.widget_height)
        lblfill.setStyleSheet("background-color:rgb(22,109,167);")

        # 添加logo
        pix = QPixmap('res/0key.png')
        lblLogo = QLabel(WinControl)
        lblLogo.setPixmap(pix)
        lblLogo.setScaledContents(True)
        lblLogo.setGeometry(0, 0, self.widget_width / 20, self.widget_height / 30)
        lblLogo.setStyleSheet("background-color:rgb(22,109,167)")
        # 添加logo

        # 添加一个titel
        lblTitel = QLabel('乐开自动化测试 V0.1', WinControl)
        lblTitel.setFont(QFont('微软雅黑', 8))
        lblTitel.setGeometry(lblLogo.x() + lblLogo.width(), 0, self.widget_width, self.widget_height / 30)
        lblTitel.setStyleSheet("background-color:rgb(22,109,167);color:rgb(255,255,255)")
        # 添加一个titel

        # 添加最大化最小化按钮
        self.exitActClose = QAction(QIcon('res/关闭.png'), '关闭', WinControl)
        self.exitActMin = QAction(QIcon('res/最小化.png'), '最小化', WinControl)
        self.exitActClose.triggered.connect(self.close)
        self.exitActMin.triggered.connect(self.showMinimized)

        self.winwidget = QtWidgets.QWidget(WinControl)
        self.winwidget.setGeometry(
            QtCore.QRect(self.widget_width - 80, 0, self.widget_width - self.widget_height / 30 + 1, self.widget_height / 30))
        self.winwidget.setStyleSheet("background-color:rgb(22,109,167)")
        self.winwidget.setObjectName("boolwidget")

        winbar = QToolBar(self.winwidget)
        winbar.setIconSize(QtCore.QSize(self.widget_height / 42, self.widget_height / 42))
        winbar.addAction(self.exitActMin)
        winbar.addAction(self.exitActClose)  # 关联到“文件”->"退出应用"
        # 添加最大化最小化按钮

        # 加入工具栏和工具按钮
        self.exitActStart = QAction(QIcon('res/开始.png'), '开始', WinControl)  # 创建串口开始图标
        self.exitActStop = QAction(QIcon('res/结束.png'), '结束', WinControl)  # 创建串口结束图标
        self.exitActSet = QAction(QIcon('res/设置.png'), '设置', WinControl)  # 创建串口结束图标
        self.exitActLink = QAction(QIcon('res/连接.png'), '连接', WinControl)  # 创建串口结束图标
        self.exitActBreak = QAction(QIcon('res/断开连接.png'), '断开连接', WinControl)  # 创建串口结束图标
        self.exitActStop.triggered.connect(self.test_pcb_stop_fun)
        self.exitActStart.triggered.connect(self.test_pcb_start_fun)
        self.exitActSet.triggered.connect(self.menu_set_fun)
        self.exitActLink.triggered.connect(self.menu_start_stop_fun)
        self.exitActBreak.triggered.connect(self.menu_start_stop_fun)

        self.exitActLink.setEnabled(True)  # 初始状态开始按键可用，停止按键不可用
        self.exitActBreak.setEnabled(False)

        self.boolwidget = QtWidgets.QWidget(WinControl)
        self.boolwidget.setGeometry(QtCore.QRect(0, self.widget_height / 30, self.widget_width, self.widget_height / 10))
        self.boolwidget.setStyleSheet("background-color:rgb(22,109,167)")
        self.boolwidget.setObjectName("boolwidget")

        toolbar = QToolBar(self.boolwidget)
        toolbar.setIconSize(QtCore.QSize(self.widget_height / 12, self.widget_height / 12))
        toolbar.addAction(self.exitActStart)  # 关联到“文件”->"退出应用"
        toolbar.addAction(self.exitActStop)
        toolbar.addAction(self.exitActSet)
        toolbar.addAction(self.exitActLink)  # 关联到“文件”->"退出应用"
        toolbar.addAction(self.exitActBreak)


        self.tab_accout = QtWidgets.QWidget(WinControl)
        self.tab_accout.setGeometry(QtCore.QRect(0, self.boolwidget.y() + self.boolwidget.height(), self.widget_width / 3, self.widget_height - (self.boolwidget.y() + self.boolwidget.height())))
        self.tab_accout.setObjectName("tab_accout")
        self.gridLayout_accout = QtWidgets.QGridLayout(self.tab_accout)
        self.gridLayout_accout.setObjectName("gridLayout_accout")
        self.groupBox_accout = QtWidgets.QGroupBox(self.tab_accout)
        self.groupBox_accout.setTitle("")
        self.groupBox_accout.setObjectName("groupBox_accout")
        self.formLayout_accout = QtWidgets.QFormLayout(self.groupBox_accout)
        self.formLayout_accout.setObjectName("formLayout_accout")
        self.gridLayout_accout.addWidget(self.groupBox_accout, 0, 0, 1, 1)

        for i in range(0,18):
            global_list.GLOBAL_LABLE_ARRAY[i] = creat_lable(self, "recv" + str(i) + ":", i * 2,self.groupBox_accout,self.formLayout_accout)
            global_list.GLOBAL_LABLE_ARRAY[i].setText("recv" + str(i) + ":")
        for i in range(0, 18):
            global_list.GLOBAL_LABLE_ARRAY[i] = creat_lable(self, "send" + str(i) + ":", i * 2 + 1, self.groupBox_accout,self.formLayout_accout)
            global_list.GLOBAL_LABLE_ARRAY[i].setText("send" + str(i) + ":")

        for i in range(0,36):
            global_list.GLOBAL_TEXT_ARRAY[i] = creat_edit(self, "recv" + str(i) + ":", i,self.groupBox_accout,self.formLayout_accout)
            label_palette = QPalette()
            label_palette.setColor(QPalette.Base, QtCore.Qt.lightGray)
            global_list.GLOBAL_TEXT_ARRAY[i].setPalette(label_palette)

        self.tab_accout2 = QtWidgets.QWidget(WinControl)
        self.tab_accout2.setGeometry(QtCore.QRect(self.widget_width / 3, self.boolwidget.y() + self.boolwidget.height(), self.widget_width / 3, self.widget_height - (self.boolwidget.y() + self.boolwidget.height())))
        self.tab_accout2.setObjectName("tab_accout2")
        self.gridLayout_accout2 = QtWidgets.QGridLayout(self.tab_accout2)
        self.gridLayout_accout2.setObjectName("gridLayout_accout2")
        self.groupBox_accout2 = QtWidgets.QGroupBox(self.tab_accout2)
        self.groupBox_accout2.setTitle("")
        self.groupBox_accout2.setObjectName("groupBox_accout2")
        self.formLayout_accout2 = QtWidgets.QFormLayout(self.groupBox_accout2)
        self.formLayout_accout2.setObjectName("formLayout_accout2")
        self.gridLayout_accout2.addWidget(self.groupBox_accout2, 0, 0, 1, 1)

        for i in range(0,18):
            global_list.GLOBAL_LABLE_ARRAY[i + 18] = creat_lable(self, "recv" + str(i + 18) + ":", i * 2,self.groupBox_accout2,self.formLayout_accout2)
            global_list.GLOBAL_LABLE_ARRAY[i + 18].setText("recv" + str(i + 18) + ":")
        for i in range(0, 18):
            global_list.GLOBAL_LABLE_ARRAY[i + 18] = creat_lable(self, "send" + str(i + 18) + ":", i * 2 + 1, self.groupBox_accout2,self.formLayout_accout2)
            global_list.GLOBAL_LABLE_ARRAY[i + 18].setText("send" + str(i + 18) + ":")

        for i in range(0,36):
            global_list.GLOBAL_TEXT_ARRAY[i + 36] = creat_edit(self, "recv" + str(i) + ":", i,self.groupBox_accout2,self.formLayout_accout2)
            label_palette = QPalette()
            label_palette.setColor(QPalette.Base, QtCore.Qt.lightGray)
            global_list.GLOBAL_TEXT_ARRAY[i + 36].setPalette(label_palette)

        gui_serial.read_list_data(self)

        # 添加一个log打印窗口和清空按键
        global_list.textLog = QTextEdit(WinControl)
        global_list.textLog.setGeometry((self.widget_width * 2) / 3, self.boolwidget.y() + self.boolwidget.height(), self.widget_width / 3, self.widget_height - (self.boolwidget.y() + self.boolwidget.height() + 60))
        global_list.textLog.setStyleSheet("border:2px solid rgb(22,109,167);background-color:rgb(0,0,0);color:rgb(255,255,255)")
        global_list.textLog.setReadOnly(True)
        global_list.textLog.moveCursor(QTextCursor.End)
        global_list.textLog.setAutoFillBackground(True)
        global_list.textLog.document().setMaximumBlockCount(5000)

        clearButton = QtWidgets.QPushButton(WinControl)
        clearButton.setIcon(QIcon("res/清空.png"))
        clearButton.setIconSize(QtCore.QSize(530 / 5, 270 / 5))
        clearButton.setGeometry(self.widget_width - 530 / 5, global_list.textLog.y() + global_list.textLog.height(), 530 / 5, 270 / 5)
        clearButton.setObjectName("clearButton")
        clearButton.clicked.connect(self.clearButton_click)


        self.retranslateUi(WinControl)
        QtCore.QMetaObject.connectSlotsByName(WinControl)

    def clearButton_click(self):
        print("clearButton_click")
        global_list.textLog.setText("")

    # 1.鼠标点击事件
    def mousePressEvent(self, evt):
        # 获取鼠标当前的坐标
        self.mouse_x = evt.globalX()
        self.mouse_y = evt.globalY()

        # 获取窗体当前坐标
        self.origin_x = self.x()
        self.origin_y = self.y()

    # 2.鼠标移动事件
    def mouseMoveEvent(self, evt):
        # 计算鼠标移动的x，y位移
        move_x = evt.globalX() - self.mouse_x
        move_y = evt.globalY() - self.mouse_y

        # 计算窗体更新后的坐标：更新后的坐标 = 原本的坐标 + 鼠标的位移
        dest_x = self.origin_x + move_x
        dest_y = self.origin_y + move_y

        # 移动窗体
        self.move(dest_x,dest_y)

    def retranslateUi(self, WinControl):
        _translate = QtCore.QCoreApplication.translate

    def menu_set_fun(self):
        print_log("menu_set_fun")
        self.serial_sub = gui_serial_class()
        self.serial_sub.initUI()

    def test_pcb_start_fun(self):
        write_list_data(self)
        global_list.GLOBAL_process = 0
        print("test_pcb_start_fun")
        global_list.GLOBAL_start_test = True
        global_list.GLOBAL_step_time = 0
        global_list.GLOBAL_total_time = 0

    def test_pcb_stop_fun(self):
        print("test_pcb_stop_fun")
        global_list.GLOBAL_start_test = False

    def menu_start_stop_fun(self):
        if global_list.GLOBAL_start_flag == True:
            global_list.GLOBAL_start_flag = False
            self.exitActLink.setEnabled(True)
            self.exitActBreak.setEnabled(False)
        else:
            global_list.GLOBAL_start_flag = True
            self.exitActLink.setEnabled(False)
            self.exitActBreak.setEnabled(True)

        gui_serial_c = gui_serial_class()
        if gui_serial_c.open_close() != "ok":
            if global_list.GLOBAL_start_flag == True:
                self.exitActLink.setEnabled(False)
                self.exitActBreak.setEnabled(True)
            else:
                self.exitActLink.setEnabled(True)
                self.exitActBreak.setEnabled(False)




